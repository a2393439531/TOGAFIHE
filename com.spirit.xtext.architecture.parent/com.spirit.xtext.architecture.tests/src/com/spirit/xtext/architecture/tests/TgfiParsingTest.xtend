/*
 * generated by Xtext 2.12.0
 */
package com.spirit.xtext.architecture.tests

import com.google.inject.Inject
import com.spirit.xtext.architecture.tgfi.Tgfi
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(TgfiInjectorProvider)
class TgfiParsingTest {
	@Inject
	ParseHelper<Tgfi> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
ArchitecturalElement SecurePIX {
	JavaPackage: "com.spirit.togaf.bb.test"
	Name: "Secure PIX"
	Version: "1.0"
	Status: "Released" 
	Objective: "Provides a Secure PIX connection"
	HL_Function: "Definition of the HL Function"
	Rules: {
			add_security: "*/PI->Sconn/SR"
			add_security_to_ds: "*/DS->SConn/SR"
	} 
	/* 
	 * This is the definition of the PIX profile in IHE
	 */
	  
	Profile PI {             
		Name: "PI"
		Description: "Patient Identification"
		Features: "Patient Match"
		Function: "Patient Management"

		actors: 
			"PIC"
			"PIS"  
		transactions:
			("PIC", "Feed", "PIS")
			("PIC", "PIXQuery", "PIS")
		domains:
			"Information"
		quality_attributes:
			att1 ["pi.levenstein.match_score<.9"]
			att2 ["pi.levenstein.match_sec<200"]
			att3 ["pi.soundex.match_score<.83"]
			att4 ["pi.soundex.match_sec<400"]

		
	}
	
	
	Profile DS {
		Name: "DS"
		Description: "Document Sharing"
		Features: "Shares Document"
		Function: "Document Management"
		actors:
			"DSAct"
			"DC"
			"DSto"
		transactions:
			("DC", "Query", "DSto")
			("DSAct", "Insert", "DSto")
		domains:
			"Semantics"
		quality_attributes:
	}
	

	/*
	 * This is the definition of the ATNA profile in IHE
	 */
	Profile SR {
		Name: "SR"
		Description: "Security Requirements"
		Features: "Provides Security"
		Function: "Security"
		actors:
			"SConn"
		transactions:
			("SConn", "Connect", "SConn")
		domains:
			"Security"
		quality_attributes:
			att1 ["sr.hw.hs_sec<3000"]
			att2 ["sr.sw.hs_sec<1000"]


		
		
	}


}

		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}
}
